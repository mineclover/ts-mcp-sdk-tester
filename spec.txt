# MCP SDK Tester Specification

## 개요
TypeScript MCP SDK의 `McpServer` 클래스가 제공하는 모든 기능을 tools로 노출하여 MCP 서버의 모든 기능을 테스트할 수 있는 포괄적인 MCP 서버입니다.

## 구현 범위

### 1. 서버 관리 기능 (Server Management)
- ✅ 서버 연결 상태 확인 (`check_server_connection`)
- ✅ 서버 정보 조회 (`get_server_info`)
- ⚠️ 서버 연결 종료 (`close_server_connection`) - 구현 필요
- ⚠️ 전송 계층 정보 조회 (`get_transport_info`) - 구현 필요

### 2. 리소스 관리 기능 (Resource Management)
- ✅ 간단한 리소스 등록 (`register_simple_resource`)
- ✅ 템플릿 리소스 등록 (`register_template_resource`)
- ✅ 복합 리소스 등록 (`register_rich_resource`)
- ✅ 등록된 리소스 목록 조회 (`list_registered_resources`)

### 3. 프롬프트 관리 기능 (Prompt Management)
- ✅ 간단한 프롬프트 등록 (`register_simple_prompt`)
- ✅ 매개변수화된 프롬프트 등록 (`register_parameterized_prompt`)
- ✅ 동적 프롬프트 등록 (`register_dynamic_prompt`)
- ✅ 대화형 프롬프트 등록 (`register_conversation_prompt`)
- ✅ 등록된 프롬프트 목록 조회 (`list_registered_prompts`)

### 4. 도구 관리 기능 (Tool Management)
- ✅ 간단한 도구 등록 (`register_simple_tool`)
- ✅ 매개변수화된 도구 등록 (`register_parameterized_tool`)
- ✅ 고급 도구 등록 (`register_advanced_tool`)
- ✅ 비동기 도구 등록 (`register_async_tool`)
- ✅ 등록된 도구 목록 조회 (`list_registered_tools`)

### 5. 알림 기능 (Notification Management)
- ✅ 리소스 목록 변경 알림 (`send_resource_list_changed`)
- ✅ 프롬프트 목록 변경 알림 (`send_prompt_list_changed`)
- ✅ 도구 목록 변경 알림 (`send_tool_list_changed`)
- ✅ 모든 목록 변경 알림 (`send_all_list_changed`)
- ✅ 등록 후 알림 테스트 (`test_notification_after_registration`)
- ✅ 알림 타이밍 테스트 (`test_notification_timing`)

### 6. 콘텐츠 처리 기능 (Content Processing)
- ✅ 텍스트 콘텐츠 테스트 (`test_text_content`)
- ✅ 이미지 콘텐츠 테스트 (`test_image_content`)
- ✅ 오디오 콘텐츠 테스트 (`test_audio_content`)
- ✅ 혼합 콘텐츠 테스트 (`test_mixed_content`)
- ✅ 대용량 콘텐츠 테스트 (`test_large_content`)
- ✅ 콘텐츠 메타데이터 테스트 (`test_content_metadata`)

### 7. 고급 서버 기능 (Advanced Server Features) - 구현 필요
- ⚠️ 레지스트리 세부 정보 조회 (`get_registry_details`)
- ⚠️ 모든 등록 항목 초기화 (`clear_all_registrations`)
- ⚠️ 등록 항목 유효성 검사 (`validate_registrations`)
- ⚠️ 성능 메트릭 조회 (`get_performance_metrics`)
- ⚠️ 오류 처리 테스트 (`test_error_handling`)
- ⚠️ 서버 상태 진단 (`health_check`)

## 기술 스택
- **런타임**: Bun
- **언어**: TypeScript
- **프레임워크**: @modelcontextprotocol/sdk
- **검증**: Zod

## 디렉토리 구조
```
features/
├── server/          # 서버 관리 기능
├── resources/       # 리소스 관리 기능
├── prompts/         # 프롬프트 관리 기능
├── tools/           # 도구 관리 기능
├── notifications/   # 알림 관리 기능
├── content/         # 콘텐츠 처리 기능
└── transports/      # 전송 계층 기능
```

## 구현 원칙
1. **완전성**: MCP SDK의 모든 public 메서드를 tools로 노출
2. **테스트 가능성**: 각 기능을 독립적으로 테스트할 수 있도록 설계
3. **타입 안전성**: Zod를 사용한 런타임 타입 검증
4. **모듈성**: 기능별로 독립적인 모듈로 구성
5. **상태 관리**: 크로스 도구 상태 공유 지원