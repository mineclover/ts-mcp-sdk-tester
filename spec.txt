# common rule


실제 구현 로직은 데모로 만들되 데모 데이터는 /demo/ 안에 분리해서 구성해서 쉽게 제거하거나 구분 할 수 있도록 구성 한다
작업이 완료되면 완료한 주제 아래에 해당 core 로직의 코드 파일 경로를 불릿 텍스트 라인을 1 tab insert 해서 작성해야 한다
- ex. - /standard/prompts, /standard/tools 
만약 이렇게 작성 된 코드 파일의 경로가 2 개 이상 일 경우 사유를 같이 작성해야 한다

한번에 Phase 전체를 끝내지 말고 위 단계를 거쳐서 Phase 내의 task 를 순차적으로 처리한다

bun --watch index.ts --port 3000 로 서버가 켜져있기 때문에 추가로 키지 않고 작업해도 된다
npm run type-check 를 통해 타입 오류 검사 가능하니 구현의 검증은 1차적으로 타입체크로 한다

# examples

https://github.com/modelcontextprotocol/typescript-sdk/tree/main/src/examples/server
https://github.com/upstash/context7


# basic

- https://modelcontextprotocol.io/specification/2025-06-18/basic
- https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
- https://modelcontextprotocol.io/specification/2025-06-18/basic/transports
- https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization
- https://modelcontextprotocol.io/specification/2025-06-18/basic/security_best_practices

## utilities

- https://modelcontextprotocol.io/specification/2025-06-18/basic/utilities/cancellation
- https://modelcontextprotocol.io/specification/2025-06-18/basic/utilities/ping
- https://modelcontextprotocol.io/specification/2025-06-18/basic/utilities/progress


# client


https://modelcontextprotocol.io/specification/2025-06-18/client/roots
- root의 경우 server에게 선택적으로 데이터의 카탈로그만 보내는 역할을 함
https://modelcontextprotocol.io/specification/2025-06-18/client/sampling
https://modelcontextprotocol.io/specification/2025-06-18/client/elicitation


# server


https://modelcontextprotocol.io/specification/2025-06-18/server
https://modelcontextprotocol.io/specification/2025-06-18/server/prompts
https://modelcontextprotocol.io/specification/2025-06-18/server/resources
https://modelcontextprotocol.io/specification/2025-06-18/server/tools

## utilities

https://modelcontextprotocol.io/specification/2025-06-18/server/utilities/completion
https://modelcontextprotocol.io/specification/2025-06-18/server/utilities/logging
https://modelcontextprotocol.io/specification/2025-06-18/server/utilities/pagination


# task order

## Phase 1: Foundation & Core Utilities (우선순위: 높음) 
1. **logging** - 모든 기능의 기반이 되는 로깅 시스템 검토/개선
	- /standard/logger.ts
	- /standard/logging.ts
2. **pagination** - 리스트 기능들의 공통 기반 구조 검토/개선 
	- /standard/pagination-utils.ts
	- Updated /standard/resources.ts, /standard/prompts.ts, /standard/tools.ts to use MCP-compliant opaque cursor pagination
3. **ping** - 기본적인 연결성 테스트 및 헬스체크 확인
	- /standard/ping.ts

## Phase 2: Basic Protocol Implementation (우선순위: 높음) 
4. **lifecycle** - 서버 초기화 및 생명주기 관리 검토
	- /standard/lifecycle.ts
	- /demo/lifecycle.ts
	- /tests/lifecycle.test.ts
	- /demo/session-lifecycle.ts
	- /tests/session-lifecycle.test.ts
	- 사유: MCP 라이프사이클 스펙에 맞게 초기화, 운영, 종료 단계를 완전히 구현하고, 세션 격리를 지원하는 SessionLifecycleManager와 SessionLifecycleManagerFactory를 추가하여 다중 사용자 환경에서 독립적인 라이프사이클 관리 구현 완료
5. **transports** - 통신 프로토콜 (stdio, HTTP) 구현 검토 
	- /standard/transports.ts
	- 사유: lifecycle 관리와 연동하여 graceful shutdown 구현, 보안 강화 (localhost binding, CORS 제한), 상태 모니터링 추가
6. **authorization** - 인증 및 권한 시스템 검토
	- /standard/authorization.ts
	- Updated /standard/transports.ts, /standard/auth.ts for security integration
	- 사유: MCP 사양에 따라 선택적 authorization 구현, HTTP 전송용 보안 미들웨어 (rate limiting, API key auth, 보안 헤더), 개발/프로덕션 환경별 설정

## Phase 3: Core Server Features (우선순위: 중간)
7. **resources** - 리소스 관리 시스템 (현재 구현 검토/개선)
8. **tools** - 도구 실행 시스템 (현재 구현 검토/개선)  
9. **prompts** - 프롬프트 템플릿 시스템 (현재 구현 검토/개선)
10. **completion** - 자동완성 기능 (현재 구현 검토/개선)

## Phase 4: Advanced Client-Server Features (우선순위: 중간)
11. **roots** - 클라이언트 루트 디렉토리 관리 (현재 구현 검토/개선)
12. **sampling** - LLM 샘플링 요청 (현재 구현 검토/개선)
13. **elicitation** - 사용자 입력 요청 (현재 구형 검토/개선)

## Phase 5: Advanced Utilities (우선순위: 낮음)  
14. **progress** - 진행상황 보고 시스템 구현
15. **cancellation** - 작업 취소 기능 구현
16. **security_best_practices** - 보안 모범사례 적용 검토

## 작업 우선순위 근거
- **Foundation First**: logging과 pagination은 모든 기능의 기반
- **Protocol Basics**: 기본 통신과 생명주기가 안정적이어야 함  
- **Core Features**: 주요 서버 기능들 (이미 구현되어 있어 검토/개선 중심)
- **Advanced Features**: 추가 기능들은 기반이 안정된 후 구현
- **Security & Optimization**: 마지막에 보안과 최적화 적용
